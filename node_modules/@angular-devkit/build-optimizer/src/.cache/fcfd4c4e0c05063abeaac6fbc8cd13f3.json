{"remainingRequest":"C:\\Users\\FaHaD\\Desktop\\helpme2\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\FaHaD\\Desktop\\helpme2\\node_modules\\@firebase\\storage\\dist\\esm\\src\\implementation\\requestinfo.js","dependencies":[{"path":"C:\\Users\\FaHaD\\Desktop\\helpme2\\node_modules\\@firebase\\storage\\dist\\esm\\src\\implementation\\requestinfo.js","mtime":1519338127000},{"path":"C:\\Users\\FaHaD\\Desktop\\helpme2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529623136640},{"path":"C:\\Users\\FaHaD\\Desktop\\helpme2\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var RequestInfo = /*@__PURE__*/ (function () {\r\n    function RequestInfo(url, method, \r\n        /**\r\n         * Returns the value with which to resolve the request's promise. Only called\r\n         * if the request is successful. Throw from this function to reject the\r\n         * returned Request's promise with the thrown error.\r\n         * Note: The XhrIo passed to this function may be reused after this callback\r\n         * returns. Do not keep a reference to it in any way.\r\n         */\r\n        handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n    return RequestInfo;\r\n}());\r\nexport { RequestInfo };\r\n//# sourceMappingURL=requestinfo.js.map\r\n",null]}